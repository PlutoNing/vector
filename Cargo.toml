[package]
name = "vector"
version = "0.49.0"
authors = ["Vector Contributors <vector@datadoghq.com>"]
edition = "2021"
description = "A lightweight and ultra-fast tool for building observability pipelines"
homepage = "https://vector.dev"
license = "MPL-2.0"
readme = "README.md"
publish = false
default-run = "vector"
autobenches = false # our benchmarks are not runnable on their own either way
# Minimum supported rust version
# See docs/DEVELOPING.md for policy
rust-version = "1.86"

[[bin]]
name = "vector"
test = false
bench = false

[[bin]]
name = "graphql-schema"
path = "src/api/schema/gen.rs"
test = false
bench = false
required-features = ["default-no-api-client"]

[[bin]]
name = "secret-backend-example"
path = "src/config/loading/secret_backend_example.rs"
test = false
bench = false
required-features = ["secret-backend-example"]

[[test]]
name = "integration"
path = "tests/integration/lib.rs"

[[test]]
name = "e2e"
path = "tests/e2e/mod.rs"

# CI-based builds use full release optimization.  See scripts/environment/release-flags.sh.
# This results in roughly a 5% reduction in performance when compiling locally vs when
# compiled via the CI pipeline.
[profile.release]
debug = false # Do not include debug symbols in the executable.

[profile.bench]
debug = true

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }

[package.metadata.deb]
name = "vector"
section = "admin"
maintainer-scripts = "distribution/debian/scripts/"
conf-files = ["/etc/vector/vector.yaml", "/etc/default/vector"]
assets = [
  ["target/release/vector", "/usr/bin/", "755"],
  ["config/vector.yaml", "/etc/vector/vector.yaml", "644"],
  ["config/examples/*", "/etc/vector/examples/", "644"],
  ["distribution/systemd/vector.service", "/lib/systemd/system/vector.service", "644"],
  ["distribution/systemd/vector.default", "/etc/default/vector", "600"],
  ["licenses/*", "/usr/share/vector/licenses/", "644"],
  ["NOTICE", "/usr/share/vector/NOTICE", "644"],
  ["LICENSE-3rdparty.csv", "/usr/share/vector/LICENSE-3rdparty.csv", "644"],
]
license-file = ["target/debian-license.txt"]
extended-description-file = "target/debian-extended-description.txt"
recommends = "datadog-signing-keys (>= 1:1.4.0)"

[package.metadata.deb.systemd-units]
unit-scripts = "distribution/systemd/"
enable = false
start = false

# libc requirements are defined by `cross`
# https://github.com/rust-embedded/cross#supported-targets
# Though, it seems like aarch64 libc is actually 2.18 and not 2.19
[package.metadata.deb.variants.arm-unknown-linux-gnueabi]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.armv7-unknown-linux-gnueabihf]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-gnu]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-musl]
depends = ""

[package.metadata.deb.variants.aarch64-unknown-linux-gnu]
depends = "libc6 (>= 2.18)"

[package.metadata.deb.variants.aarch64-unknown-linux-musl]
depends = ""

[workspace]
members = [
  ".",
  "lib/codecs",
  "lib/docs-renderer",
  "lib/enrichment",
  "lib/fakedata",
  "lib/file-source",
  "lib/portpicker",
  "lib/tracing-limit",
  "lib/vector-api-client",
  "lib/vector-buffers",
  "lib/vector-common",
  "lib/vector-config",
  "lib/vector-config-common",
  "lib/vector-config-macros",
  "lib/vector-core",
  "lib/vector-lib",
  "lib/vector-lookup",
  "lib/vector-stream",
  "lib/vector-tap",
  "lib/vector-vrl/cli",
  "lib/vector-vrl/functions",
  "lib/vector-vrl/tests",
  "lib/vector-vrl/web-playground",
  "vdev",
]

[workspace.dependencies]
anyhow = "1.0.98"
cfg-if = { version = "1.0.1", default-features = false }
chrono = { version = "0.4.41", default-features = false, features = ["clock", "serde"] }
chrono-tz = { version = "0.10.3", default-features = false, features = ["serde"] }
clap = { version = "4.5.40", default-features = false, features = ["derive", "error-context", "env", "help", "std", "string", "usage", "wrap_help"] }
darling = { version = "0.20.11", default-features = false, features = ["suggestions"] }
flate2 = { version = "1.1.2", default-features = false, features = ["zlib-rs"] }
futures = { version = "0.3.31", default-features = false, features = ["compat", "io-compat", "std"], package = "futures" }
glob = { version = "0.3.2", default-features = false }
hickory-proto = { version = "0.25.2", default-features = false, features = ["dnssec-ring"] }
humantime = { version = "2.2.0", default-features = false }
indexmap = { version = "2.10.0", default-features = false, features = ["serde", "std"] }
inventory = { version = "0.3" }
indoc = { version = "2.0.6" }
metrics = "0.24.2"
metrics-tracing-context = { version = "0.17.0", default-features = false }
metrics-util = { version = "0.18.0", default-features = false, features = ["registry"] }
nom = { version = "8.0.0", default-features = false }
paste = { version = "1.0.15" }
pin-project = { version = "1.1.10", default-features = false }
proptest = { version = "1.7" }
proptest-derive = { version = "0.5.1" }
prost = { version = "0.12", default-features = false, features = ["std"] }
prost-build = { version = "0.12", default-features = false }
prost-reflect = { version = "0.14", features = ["serde"], default-features = false }
prost-types = { version = "0.12", default-features = false }
rand = { version = "0.9.1", default-features = false, features = ["small_rng", "thread_rng"] }
rand_distr = { version = "0.5.1", default-features = false }
semver = { version = "1.0.26", default-features = false, features = ["serde", "std"] }
serde_json = { version = "1.0.140", default-features = false, features = ["raw_value", "std"] }
serde = { version = "1.0.219", default-features = false, features = ["alloc", "derive", "rc"] }
snafu = { version = "0.8.6", default-features = false, features = ["futures", "std"] }
tempfile = "3.20.0"
tokio = { version = "1.45.1", default-features = false, features = ["full"] }
toml = { version = "0.8.23", default-features = false, features = ["display", "parse"] }
tonic = { version = "0.11", default-features = false, features = ["transport", "codegen", "prost", "tls", "tls-roots", "gzip"] }
tonic-build = { version = "0.11", default-features = false, features = ["transport", "prost"] }
uuid = { version = "1.17.0", features = ["v4", "v7", "serde"] }
vector-lib = { path = "lib/vector-lib", default-features = false, features = ["vrl"] }
vector-config = { path = "lib/vector-config" }
vector-config-common = { path = "lib/vector-config-common" }
vector-config-macros = { path = "lib/vector-config-macros" }
vrl = { git = "https://github.com/vectordotdev/vrl.git", branch = "main", features = ["arbitrary", "cli", "test", "test_framework"] }

[dependencies]
cfg-if.workspace = true
clap.workspace = true
indoc.workspace = true
paste.workspace = true
pin-project.workspace = true
proptest = { workspace = true, optional = true }
proptest-derive = { workspace = true, optional = true }
semver.workspace = true
snafu.workspace = true
uuid.workspace = true
vrl.workspace = true


fakedata = { path = "lib/fakedata", optional = true }
portpicker = { path = "lib/portpicker" }
tracing-limit = { path = "lib/tracing-limit" }
vector-common = { path = "lib/vector-common", default-features = false}
vector-lib.workspace = true
vector-config.workspace = true
vector-config-common.workspace = true
vector-config-macros.workspace = true
vector-vrl-functions = { path = "lib/vector-vrl/functions" }
# Tokio / Futures
async-stream = { version = "0.3.6", default-features = false }
async-trait = { version = "0.1.88", default-features = false }
futures.workspace = true
tokio = { version = "1.45.1", default-features = false, features = ["full"] }
tokio-openssl = { version = "0.6.5", default-features = false }
tokio-stream = { version = "0.1.17", default-features = false, features = ["net", "sync", "time"] }
tokio-util = { version = "0.7", default-features = false, features = ["io", "time"] }
console-subscriber = { version = "0.4.1", default-features = false, optional = true }

# Tracing
tracing = { version = "0.1.34", default-features = false }
tracing-core = { version = "0.1.26", default-features = false }
tracing-futures = { version = "0.2.5", default-features = false, features = ["futures-03"] }
tracing-subscriber = { version = "0.3.19", default-features = false, features = ["ansi", "env-filter", "fmt", "json", "registry", "tracing-log"] }
tracing-tower = { git = "https://github.com/tokio-rs/tracing", default-features = false, rev = "e0642d949891546a3bb7e47080365ee7274f05cd" }

# Metrics
metrics.workspace = true
metrics-tracing-context.workspace = true

# AWS - Official SDK
aws-runtime = { version = "1.5.8", optional = true }
aws-config = { version = "1.6.1", default-features = false, features = ["behavior-version-latest", "credentials-process", "sso", "rt-tokio"], optional = true }
aws-credential-types = { version = "1.2.3", default-features = false, features = ["hardcoded-credentials"], optional = true }
aws-sdk-cloudwatch = { version = "1.70.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-cloudwatchlogs = { version = "1.76.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-firehose = { version = "1.71.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-kinesis = { version = "1.66.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-kms = { version = "1.75.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-s3 = { version = "1.15.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-secretsmanager = { version = "1.76.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-sns = { version = "1.73.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-sdk-sqs = { version = "1.64.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }
aws-types = { version = "1.3.7", default-features = false, optional = true }

# The sts crate is needed despite not being referred to anywhere in the code because we need to set the
# `behavior-version-latest` feature. Without this we get a runtime panic when `auth.assume_role` authentication
# is configured.
aws-sdk-sts = { version = "1.73.0", default-features = false, features = ["behavior-version-latest", "rt-tokio"], optional = true }

# The `aws-sdk-sts` crate is needed despite not being referred to anywhere in the code because we need to set the
# `behavior-version-latest` feature. Without this we get a runtime panic when `auth.assume_role` authentication is configured.
aws-sigv4 = { version = "1.3.2", default-features = false, features = ["sign-http"], optional = true }

aws-smithy-async = { version = "1.2.5", default-features = false, features = ["rt-tokio"], optional = true }
aws-smithy-http = { version = "0.62", default-features = false, features = ["event-stream", "rt-tokio"], optional = true }
aws-smithy-runtime = { version = "1.8.3", default-features = false, features = ["client", "connector-hyper-0-14-x", "rt-tokio"], optional = true }
aws-smithy-runtime-api = { version = "1.7.3", default-features = false, optional = true }
aws-smithy-types = { version = "1.2.11", default-features = false, features = ["rt-tokio"], optional = true }

# Tower
tower = { version = "0.5.2", default-features = false, features = ["buffer", "limit", "retry", "timeout", "util", "balance", "discover"] }
tower-http = { version = "0.4.4", default-features = false, features = ["compression-full", "decompression-gzip", "trace"] }
# Serde
serde.workspace = true
serde-toml-merge = { version = "0.3.9", default-features = false }
serde_bytes = { version = "0.11.17", default-features = false, features = ["std"], optional = true }
serde_json.workspace = true
serde_with = { version = "3.14.0", default-features = false, features = ["macros", "std"] }
serde_yaml = { version = "0.9.34", default-features = false }

# Messagepack
rmp-serde = { version = "1.3.0", default-features = false, optional = true }
rmpv = { version = "1.3.0", default-features = false, features = ["with-serde"], optional = true }

# Prost / Protocol Buffers
prost = { workspace = true, optional = true }
prost-reflect = { workspace = true, optional = true }
prost-types = { workspace = true, optional = true }

# GCP
goauth = { version = "0.16.0", optional = true }
smpl_jwt = { version = "0.8.0", default-features = false, optional = true }

# API
async-graphql = { version = "7.0.17", default-features = false, optional = true, features = ["chrono", "playground"] }
async-graphql-warp = { version = "7.0.17", default-features = false, optional = true }

# API client
crossterm = { version = "0.29.0", default-features = false, features = ["event-stream", "windows"], optional = true }
num-format = { version = "0.4.4", default-features = false, features = ["with-num-bigint"], optional = true }
number_prefix = { version = "0.4.0", default-features = false, features = ["std"], optional = true }
ratatui = { version = "0.29.0", optional = true, default-features = false, features = ["crossterm"] }


hex = { version = "0.4.3", default-features = false, optional = true }

# External libs
arc-swap = { version = "1.7", default-features = false, optional = true }
async-compression = { version = "0.4.25", default-features = false, features = ["tokio", "gzip", "zstd"], optional = true }
apache-avro = { version = "0.16.0", default-features = false, optional = true }
axum = { version = "0.6.20", default-features = false }
base64 = { version = "0.22.1", default-features = false, optional = true }
bloomy = { version = "1.2.0", default-features = false, optional = true }
bollard = { version = "0.19.1", default-features = false, features = ["pipe", "ssl", "chrono"], optional = true }
bytes = { version = "1.10.1", default-features = false, features = ["serde"] }
bytesize = { version = "2.0.1", default-features = false }
chrono.workspace = true
chrono-tz.workspace = true
colored = { version = "3.0.0", default-features = false }
csv = { version = "1.3", default-features = false }
derivative = { version = "2.2.0", default-features = false }
dirs-next = { version = "2.0.0", default-features = false, optional = true }
dyn-clone = { version = "1.0.19", default-features = false }
encoding_rs = { version = "0.8.35", default-features = false, features = ["serde"] }
enum_dispatch = { version = "0.3.13", default-features = false }
evmap = { version = "10.0.2", default-features = false, optional = true }
evmap-derive = { version = "0.2.0", default-features = false, optional = true }
exitcode = { version = "1.1.2", default-features = false }
flate2.workspace = true
futures-util = { version = "0.3.29", default-features = false }
glob.workspace = true
governor = { version = "0.10.0", default-features = false, features = ["dashmap", "jitter", "std"], optional = true }
h2 = { version = "0.4.11", default-features = false, optional = true }
hash_hasher = { version = "2.0.4", default-features = false }
hashbrown = { version = "0.14.5", default-features = false, optional = true, features = ["ahash"] }
headers = { version = "0.3.9", default-features = false }
hostname = { version = "0.4.0", default-features = false }
http = { version = "0.2.9", default-features = false }
http-1 = { package = "http", version = "1.0", default-features = false, features = ["std"] }
http-serde = "1.1.3"
http-body = { version = "0.4.5", default-features = false }
humantime.workspace = true
hyper = { version = "0.14.28", default-features = false, features = ["client", "runtime", "http1", "http2", "server", "stream"] }
hyper-openssl = { version = "0.9.2", default-features = false }
hyper-proxy = { version = "0.9.1", default-features = false, features = ["openssl-tls"] }
indexmap.workspace = true
inventory = { version = "0.3.20", default-features = false }
ipnet = { version = "2", default-features = false, optional = true, features = ["serde", "std"] }
itertools = { version = "0.14.0", default-features = false, optional = false, features = ["use_alloc"] }
kube = { version = "0.93.0", default-features = false, features = ["client", "openssl-tls", "runtime"], optional = true }
listenfd = { version = "1.0.2", default-features = false, optional = true }
lru = { version = "0.15.0", default-features = false, optional = true }
maxminddb = { version = "0.26.0", default-features = false, optional = true, features = ["simdutf8"] }
md-5 = { version = "0.10", default-features = false, optional = true }
nkeys = { version = "0.4.4", default-features = false, optional = true }
nom = { workspace = true, optional = true }
notify = { version = "8.0.0", default-features = false, features = ["macos_fsevent"] }
openssl = { version = "0.10.73", default-features = false, features = ["vendored"] }
openssl-probe = { version = "0.1.6", default-features = false }
ordered-float = { version = "4.6.0", default-features = false }
percent-encoding = { version = "2.3.1", default-features = false }
quick-junit = { version = "0.5.1" }
rand.workspace = true
rand_distr.workspace = true
regex = { version = "1.11.1", default-features = false, features = ["std", "perf"] }
roaring = { version = "0.11.0", default-features = false, features = ["std"], optional = true }
seahash = { version = "4.1.0", default-features = false }
smallvec = { version = "1", default-features = false, features = ["union", "serde"] }
snap = { version = "1.1.1", default-features = false }
socket2 = { version = "0.5.10", default-features = false }
sqlx = { version = "0.8.6", default-features = false, features = ["derive", "postgres", "chrono", "runtime-tokio"], optional=true }
stream-cancel = { version = "0.8.2", default-features = false }
strip-ansi-escapes = { version = "0.2.1", default-features = false }
syslog = { version = "6.1.1", default-features = false, optional = true }
tikv-jemallocator = { version = "0.6.0", default-features = false, features = ["unprefixed_malloc_on_supported_platforms"], optional = true }
tokio-tungstenite = { version = "0.20.1", default-features = false, features = ["connect"], optional = true }
toml.workspace = true
hickory-proto = { workspace = true, optional = true }
tonic = { workspace = true, optional = true }
thread_local = { version = "1.1.9", default-features = false, optional = true }
typetag = { version = "0.2.20", default-features = false }
url = { version = "2.5.4", default-features = false, features = ["serde"] }
warp = { version = "0.3.7", default-features = false }
zstd = { version = "0.13.0", default-features = false }
arr_macro = { version = "0.2.1" }

# depending on fork for bumped nix dependency
# https://github.com/heim-rs/heim/pull/360
heim = { git = "https://github.com/vectordotdev/heim.git", branch = "update-nix", default-features = false, features = ["disk"] }

# make sure to update the external docs when the Lua version changes
mlua = { version = "0.10.5", default-features = false, features = ["lua54", "send", "vendored", "macros"], optional = true }
sysinfo = "0.34.2"
byteorder = "1.5.0"

[target.'cfg(windows)'.dependencies]
windows-service = "0.8.0"

[target.'cfg(unix)'.dependencies]
nix = { version = "0.26.2", default-features = false, features = ["socket", "signal"] }

[target.'cfg(target_os = "linux")'.dependencies]
netlink-packet-utils = "0.5.2"
netlink-packet-sock-diag = "0.4.2"
netlink-packet-core = "0.7.0"
netlink-sys = { version = "0.8.7", features = ["tokio_socket"] }

[build-dependencies]
prost-build = { workspace = true, optional = true }
tonic-build = { workspace = true, optional = true }
# update 'openssl_version' in website/config.toml whenever <major.minor> version changes
openssl-src = { version = "300", default-features = false, features = ["force-engine", "legacy"] }

[dev-dependencies]
approx = "0.5.1"
assert_cmd = { version = "2.0.17", default-features = false }
aws-smithy-runtime = { version = "1.8.3", default-features = false, features = ["tls-rustls"] }
base64 = "0.22.1"
criterion = { version = "0.6.0", features = ["html_reports", "async_tokio"] }
itertools = { version = "0.14.0", default-features = false, features = ["use_alloc"] }
libc = "0.2.174"
similar-asserts = "1.7.0"
proptest.workspace = true
quickcheck = "1.0.3"
reqwest = { version = "0.11", features = ["json"] }
rstest = { version = "0.25.0" }
tempfile.workspace = true
test-generator = "0.3.1"
tokio = { version = "1.45.1", features = ["test-util"] }
tokio-test = "0.4.4"
tower-test = "0.4.0"
vector-lib = { workspace = true, features = ["test"] }
vrl.workspace = true

wiremock = "0.6.4"
zstd = { version = "0.13.0", default-features = false }

[patch.crates-io]
# The upgrade for `tokio-util` >= 0.6.9 is blocked on https://github.com/vectordotdev/vector/issues/11257.
tokio-util = { git = "https://github.com/vectordotdev/tokio", branch = "tokio-util-0.7.13-framed-read-continue-on-error" }
nix = { git = "https://github.com/vectordotdev/nix.git", branch = "memfd/gnu/musl" }
# The `heim` crates depend on `ntapi` 0.3.7 on Windows, but that version has an
# unaligned access bug fixed in the following revision.
ntapi = { git = "https://github.com/MSxDOS/ntapi.git", rev = "24fc1e47677fc9f6e38e5f154e6011dc9b270da6" }

[features]
# Default features for *-unknown-linux-gnu and *-apple-darwin
default = ["api", "api-client", "enrichment-tables", "sinks", "sources",  "transforms", "unix", "secrets"]
# Default features for `cargo docs`. The same as `default` but without `rdkafka?/gssapi-vendored` which would require installing libsasl in our doc build environment.
docs = ["api", "api-client", "enrichment-tables", "sinks", "sources",  "transforms", "unix", "secrets"]
# Default features for *-unknown-linux-* which make use of `cmake` for dependencies
default-cmake = ["api", "api-client", "enrichment-tables","sinks", "sources",  "transforms", "unix","secrets"]
# Default features for *-pc-windows-msvc
# TODO: Enable SASL https://github.com/vectordotdev/vector/pull/3081#issuecomment-659298042
default-msvc = ["api", "api-client", "enrichment-tables", "sinks", "sources", "transforms", "secrets"]
default-musl = ["api", "api-client", "enrichment-tables", "sinks", "sources",  "transforms", "unix", "secrets"]
default-no-api-client = ["api", "enrichment-tables", "sinks", "sources",  "transforms", "unix",  "secrets"]
default-no-vrl-cli = ["api", "sinks", "sources",  "transforms", "unix",  "secrets"]
tokio-console = ["dep:console-subscriber", "tokio/tracing"]

# Enables the binary secret-backend-example
secret-backend-example = ["transforms"]

all-logs = ["sinks-logs", "sources-logs",  "transforms-logs"]
all-metrics = ["sinks-metrics", "sources-metrics", "transforms-metrics"]

# Target specific release features.
# The `make` tasks will select this according to the appropriate triple.
# Use this section to turn off or on specific features for specific triples.
target-aarch64-unknown-linux-gnu = ["api", "api-client", "enrichment-tables",  "sinks", "sources",  "transforms", "unix", "secrets"]
target-aarch64-unknown-linux-musl = ["api", "api-client", "enrichment-tables",  "sinks", "sources",  "transforms", "unix", "secrets"]
target-armv7-unknown-linux-gnueabihf = ["api", "api-client", "enrichment-tables",  "sinks", "sources", "transforms", "unix", "secrets"]
target-armv7-unknown-linux-musleabihf = ["api", "api-client", "enrichment-tables", "sinks", "sources",  "transforms", "secrets"]
target-arm-unknown-linux-gnueabi = ["api", "api-client", "enrichment-tables", "sinks", "sources",  "transforms", "unix", "secrets"]
target-arm-unknown-linux-musleabi = ["api", "api-client",  "enrichment-tables", "sinks", "sources",  "transforms", "secrets"]
target-x86_64-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "sinks", "sources",  "transforms", "unix", "secrets"]
target-x86_64-unknown-linux-musl = ["api", "api-client", "enrichment-tables", "sinks", "sources", "transforms", "unix", "secrets"]
# Does not currently build
target-powerpc64le-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "sinks", "sources", "transforms", "unix", "secrets"]
# Currently doesn't build due to lack of support for 64-bit atomics
target-powerpc-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "sinks", "sources", "transforms", "unix", "secrets"]

# Enables features that work only on systems providing `cfg(unix)`
unix = ["tikv-jemallocator", "allocation-tracing"]
allocation-tracing = []


docker = ["dep:bollard", "dep:dirs-next"]

# API
api = [
  "dep:async-graphql",
  "dep:async-graphql-warp",
  "dep:base64",
  "vector-lib/api",
]

# API client
api-client = [
  "dep:crossterm",
  "dep:num-format",
  "dep:number_prefix",
  "dep:ratatui",
  "vector-lib/api",
  "vector-lib/api-client",
]

aws-core = [
  "aws-runtime",
  "aws-config",
  "dep:aws-credential-types",
  "dep:aws-sigv4",
  "dep:aws-types",
  "dep:aws-smithy-async",
  "dep:aws-smithy-http",
  "dep:aws-smithy-types",
  "dep:aws-smithy-runtime",
  "dep:aws-smithy-runtime-api",
  "dep:aws-sdk-sts",
]

# Anything that requires Protocol Buffers.
protobuf-build = ["dep:tonic-build", "dep:prost-build"]

# Enrichment Tables
# maybe essential
enrichment-tables = ["enrichment-tables-geoip", "enrichment-tables-mmdb", "enrichment-tables-memory"]
enrichment-tables-geoip = ["dep:maxminddb"]
enrichment-tables-mmdb = ["dep:maxminddb"]
enrichment-tables-memory = ["dep:evmap", "dep:evmap-derive", "dep:thread_local"]

# Codecs
codecs-syslog = ["vector-lib/syslog"]

# Secrets
# removed
secrets = ["secrets-aws-secrets-manager"]
secrets-aws-secrets-manager = ["aws-core", "dep:aws-sdk-secretsmanager"]

# Sources
sources = ["sources-logs", "sources-metrics"]
sources-logs = [
  "sources-demo_logs",
  "sources-exec",
  "sources-file",
  "sources-file_descriptor",
  "sources-stdin",
]
sources-metrics = [
  "dep:prost",
  "sources-host_metrics",
  "sources-static_metrics",
]

sources-demo_logs = ["dep:fakedata"]
sources-exec = []
sources-file = ["vector-lib/file-source"]
sources-file_descriptor = ["tokio-util/io"]
sources-host_metrics = ["heim/cpu", "heim/host", "heim/memory", "heim/net"]
sources-static_metrics = []
sources-stdin = ["tokio-util/io"]

# Transforms
transforms = ["transforms-logs", "transforms-metrics"]
transforms-logs = [
  "transforms-remap",
  "transforms-sample",
]
transforms-metrics = [
  "transforms-remap",
  "transforms-tag_cardinality_limit",
]

transforms-remap = []
transforms-sample = ["transforms-impl-sample"]
transforms-tag_cardinality_limit = ["dep:bloomy", "dep:hashbrown"]

# Implementations of transforms
transforms-impl-sample = []
transforms-impl-reduce = []

# Sinks
sinks = ["sinks-logs", "sinks-metrics"]
sinks-logs = [
  "sinks-blackhole",
  "sinks-console",
  "sinks-file",
  "sinks-http",
  "sinks-postgres",
  "sinks-socket",
]
sinks-metrics = [
  "sinks-blackhole",
  "sinks-console",
]

sinks-blackhole = []
sinks-console = []
sinks-file = ["dep:async-compression"]
sinks-http = []
sinks-postgres = ["dep:sqlx"]
sinks-socket = ["sinks-utils-udp"]
sinks-utils-udp = []
# Identifies that the build is a nightly build
nightly = []

# Integration testing-related features
all-integration-tests = [
  "postgres_sink-integration-tests",
]

postgres_sink-integration-tests = ["sinks-postgres"]
disable-resolv-conf = []
shutdown-tests = ["api", "sinks-blackhole", "sinks-console", "sources", "transforms-remap", "unix"]
cli-tests = ["sinks-blackhole", "sinks-socket", "sources-demo_logs", "sources-file"]
test-utils = []

vector-api-tests = [
  "sources-demo_logs",
  "transforms-remap",
  "sinks-blackhole"
]
vector-unit-test-tests = [
  "sources-demo_logs",
  "transforms-remap",
  "sinks-console"
]

component-validation-runner = ["dep:tonic"]
# For now, only include components that implement ValidatableComponent.
# In the future, this can change to simply reference the targets `sources`, `transforms`, `sinks`
component-validation-tests = [
  "component-validation-runner",
  "sinks-http",
]

# Grouping together features for benchmarks. We exclude the API client due to it causing the build process to run out
# of memory when those additional dependencies are built in CI.
benches = [
  "sinks-file",
  "sinks-http",
  "sinks-socket",
  "sources-file",
  "transforms-sample",
]
language-benches = ["sinks-socket","transforms-remap"]
# Separate benching process for metrics due to the nature of the bootstrap procedures.
statistic-benches = []
remap-benches = ["transforms-remap"]
codecs-benches = []
enrichment-tables-benches = ["enrichment-tables-geoip", "enrichment-tables-mmdb", "enrichment-tables-memory"]
proptest = ["dep:proptest", "dep:proptest-derive", "vrl/proptest"]

[[bench]]
name = "default"
harness = false
required-features = ["benches"]

[[bench]]
name = "remap"
harness = false
required-features = ["remap-benches"]

[[bench]]
name = "enrichment_tables"
harness = false
required-features = ["enrichment-tables-benches"]

[[bench]]
name = "languages"
harness = false
required-features = ["language-benches"]

[[bench]]
name = "distribution_statistic"
harness = false
required-features = ["statistic-benches"]


[[bench]]
name = "codecs"
path = "benches/codecs/main.rs"
harness = false
required-features = ["codecs-benches"]
